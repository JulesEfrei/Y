type User {
  id: ID!
  email: String!
  name: String!
  createdAt: String!
  updatedAt: String!
  posts: [Post!]
  comments: [Comment!]
  likes: [Like!]
  commentLikes: [CommentLike!]
}

type Category {
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
  posts: [Post!]
}

type Post {
  id: ID!
  title: String!
  content: String!
  createdAt: String!
  updatedAt: String!
  author: User!
  category: Category
  comments: [Comment!]
  likes: [Like!]!
  likesCount: Int!
}

type Comment {
  id: ID!
  content: String!
  createdAt: String!
  updatedAt: String!
  author: User!
  post: Post!
  parent: Comment
  replies: [Comment!]
  likes: [CommentLike!]!
  likesCount: Int!
}

type Like {
  id: ID!
  createdAt: String!
  user: User!
  post: Post!
}

type CommentLike {
  id: ID!
  createdAt: String!
  user: User!
  comment: Comment!
}

type AuthPayload {
  token: String!
  user: User!
}

# Standard response interface for mutations
interface MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

# Auth mutation responses
type AuthResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  token: String
  user: User
}

# SignOut response
type SignOutResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

# Category mutation responses
type CategoryResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  category: Category
}

# Post mutation responses
type PostResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  post: Post
}

# Comment mutation responses
type CommentResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  comment: Comment
}

# Like mutation responses
type LikeResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  like: Like
}

# CommentLike mutation responses
type CommentLikeResponse implements MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
  commentLike: CommentLike
}

type PostsResult {
  posts: [Post!]!
  totalCount: Int!
}

type Query {
  me: User
  users: [User!]!
  user(id: ID!): User
  categories: [Category!]!
  category(id: ID!): Category
  posts(page: Int = 1, limit: Int = 20, offset: Int = 0): PostsResult!
  searchPosts(
    search: String!
    page: Int = 1
    limit: Int = 20
    offset: Int = 0
  ): PostsResult!
  popularPosts(page: Int = 1, limit: Int = 20, offset: Int = 0): PostsResult!
  postsByCategory(
    categoryId: ID!
    page: Int = 1
    limit: Int = 20
    offset: Int = 0
  ): PostsResult!
  postsByUser(
    userId: ID!
    page: Int = 1
    limit: Int = 20
    offset: Int = 0
  ): PostsResult!
  post(id: ID!): Post
  postComments(postId: ID!): [Comment!]!
  commentReplies(commentId: ID!): [Comment!]!
}

type Mutation {
  # Auth
  signUp(email: String!, password: String!, name: String!): AuthResponse!
  signIn(email: String!, password: String!): AuthResponse!
  signOut: SignOutResponse!

  # Categories
  createCategory(name: String!): CategoryResponse!
  updateCategory(id: ID!, name: String!): CategoryResponse!
  deleteCategory(id: ID!): CategoryResponse!

  # Posts
  createPost(
    title: String!
    content: String!
    categoryName: String
  ): PostResponse!
  updatePost(
    id: ID!
    title: String
    content: String
    categoryName: String
  ): PostResponse!
  deletePost(id: ID!): PostResponse!

  # Comments
  createComment(postId: ID!, content: String!): CommentResponse!
  replyToComment(commentId: ID!, content: String!): CommentResponse!
  updateComment(id: ID!, content: String!): CommentResponse!
  deleteComment(id: ID!): CommentResponse!

  # Likes
  toggleLike(postId: ID!): LikeResponse!
  toggleCommentLike(commentId: ID!): CommentLikeResponse!
}
